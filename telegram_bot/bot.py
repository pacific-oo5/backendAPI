import os
import sys

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django ---
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, BASE_DIR)
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "backendAPI.settings")
import django
django.setup()

import asyncio
from dotenv import load_dotenv
import logging

logging.basicConfig(level=logging.INFO)

# --- Aiogram ---
from telegram_bot.localization import LANGUAGES
from telegram_bot.utils import get_text
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram.client.bot import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command

from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from api.models import Vacancy
from asgiref.sync import sync_to_async

# --- –ú–æ–¥–µ–ª–∏ ---
from userauth.models import TelegramProfile

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

class Form(StatesGroup):
    waiting_for_token = State()
    waiting_for_add_filter = State()
    waiting_for_del_filter = State()


async def get_user_language_bot(telegram_id):
    """–ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    profile = await sync_to_async(lambda: TelegramProfile.objects.filter(telegram_id=telegram_id).first())()
    if profile and profile.language in LANGUAGES:
        return profile.language
    return 'ru'


async def get_main_keyboard(telegram_id):
    profile = await sync_to_async(lambda: TelegramProfile.objects.filter(telegram_id=telegram_id).first())()
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    lang = await get_user_language_bot(telegram_id)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫" if lang == 'ru' else
                            "üåê –¢–∏–ª–¥–∏ ”©–∑–≥”©—Ä—Ç“Ø“Ø" if lang == 'kg' else
                            "üåê Change language")]
        ],
        resize_keyboard=True
        )
    return keyboard


# --- /start ---
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.delete()

    args = message.text.split(maxsplit=1)
    token_arg = args[1] if len(args) > 1 else None

    # --- –ü—Ä–∏—à—ë–ª —Å —Ç–æ–∫–µ–Ω–æ–º ---
    if token_arg:
        profile = await sync_to_async(lambda: TelegramProfile.objects.filter(token=token_arg).first())()
        if not profile:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–æ–∫–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –ø–æ telegram_id
        if profile.telegram_id:
            if profile.telegram_id == message.from_user.id:
                await message.answer("‚úÖ –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.")
            else:
                await message.answer(
                    "‚ùå –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º. "
                    "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤—è–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π."
                )
            return

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∫ —Ç–µ–∫—É—â–µ–º—É Telegram
        profile.telegram_id = message.from_user.id
        profile.is_connected = True
        profile.first_name = message.from_user.first_name
        profile.last_name = message.from_user.last_name
        profile.username = message.from_user.username
        await sync_to_async(profile.save)()
        await message.answer(f"‚úÖ Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω, {profile.username}!")
        return

    # --- –ü—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ä—Ç ---
    profile = await sync_to_async(lambda: TelegramProfile.objects.filter(telegram_id=message.from_user.id).first())()
    if profile:
        hidden_token = f"{str(profile.token)[:4]}...{str(profile.token)[-4:]}" if profile.token else "–Ω–µ—Ç"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="keep_token")],
                [InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="change_token")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–≤—è–∑–∞—Ç—å —Ç–æ–∫–µ–Ω", callback_data=f"unlink_token:{profile.id}")],
            ]
        )
        sent_message = await message.answer(
            await get_text(message.from_user.id, 'already_linked', token=hidden_token),
            reply_markup=keyboard
        )
        await state.update_data(message_id=sent_message.message_id)
    else:
        sent_message = await message.answer(
            await get_text(message.from_user.id, 'start'),
            reply_markup=await get_main_keyboard(message.from_user.id)
        )
        await state.set_state(Form.waiting_for_token)
        await state.update_data(message_id=sent_message.message_id)


@dp.callback_query(F.data.startswith("unlink_token:"))
async def unlink_token_callback(callback: types.CallbackQuery):
    _, profile_id = callback.data.split(":")
    profile = await sync_to_async(lambda: TelegramProfile.objects.filter(id=profile_id).first())()
    if profile:
        old_token = profile.token
        profile.telegram_id = None
        profile.first_name = ""
        profile.last_name = ""
        profile.username = ""
        profile.is_connected = False
        await sync_to_async(profile.save)()
        await callback.message.edit_text(f"‚ùå –¢–æ–∫–µ–Ω –æ—Ç–≤—è–∑–∞–Ω. –°—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω {old_token} –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç.")
    else:
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# --- /help ---
@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.delete()
    await message.answer(await get_text(message.from_user.id, 'help_text'))

# --- /lang ---
@dp.message(Command("lang"))
async def change_language(message: types.Message):
    await message.delete()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{LANGUAGES['kg']['flag']} –ö—ã—Ä–≥—ã–∑—á–∞", callback_data="lang_kg"),
             InlineKeyboardButton(text=f"{LANGUAGES['ru']['flag']} –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
            [InlineKeyboardButton(text=f"{LANGUAGES['en']['flag']} English", callback_data="lang_en")]
        ]
    )
    await message.answer(await get_text(message.from_user.id, 'choose_language'), reply_markup=keyboard)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery, state: FSMContext):
    # --- –ö–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω" ---
    if callback.data == "keep_token":
        try:
            await callback.message.delete()
        except:
            pass

        profile = await sync_to_async(lambda: TelegramProfile.objects.filter(telegram_id=callback.from_user.id).first())()
        if profile:
            profile.first_name = callback.from_user.first_name
            profile.last_name = callback.from_user.last_name
            profile.username = callback.from_user.username
            profile.is_connected = True
            await sync_to_async(profile.save)()
            msg_text = await get_text(callback.from_user.id, 'token_kept')
        else:
            msg_text = "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."

        new_keyboard = await get_main_keyboard(callback.from_user.id)
        sent_msg = await callback.message.answer(msg_text, reply_markup=new_keyboard)
        await asyncio.sleep(3)
        await sent_msg.delete()
        await state.clear()

    # --- –ö–Ω–æ–ø–∫–∞ "–°–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω" ---
    elif callback.data == "change_token":
        try:
            await callback.message.delete()
        except:
            pass

        await callback.message.answer(await get_text(callback.from_user.id, 'enter_new_token'))
        await state.set_state(Form.waiting_for_token)

    # --- –ö–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ ---
    elif callback.data.startswith("lang_"):
        try:
            profile = await sync_to_async(TelegramProfile.objects.get)(telegram_id=callback.from_user.id)
            lang_code = callback.data.split("_")[1]
            profile.language = lang_code
            await sync_to_async(profile.save)()

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á—ë–Ω –∞–∫–∫–∞—É–Ω—Ç)
            new_keyboard = await get_main_keyboard(callback.from_user.id)

            await callback.message.answer(
                await get_text(callback.from_user.id, 'language_changed', language=LANGUAGES[lang_code]['name']),
                reply_markup=new_keyboard
            )
        except TelegramProfile.DoesNotExist:
            await callback.message.answer(await get_text(callback.from_user.id, 'not_linked'))

    # --- –ö–Ω–æ–ø–∫–∞ "–û—Ç–≤—è–∑–∞—Ç—å —Ç–æ–∫–µ–Ω" ---
    elif callback.data == "unlink_token":
        try:
            profile = await sync_to_async(lambda: TelegramProfile.objects.filter(telegram_id=callback.from_user.id).first())()
            if profile:
                profile.telegram_id = None
                profile.first_name = ""
                profile.last_name = ""
                profile.username = ""
                profile.is_connected = False
                await sync_to_async(profile.save)()
                await callback.message.edit_text("‚ùå –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω.")
            else:
                await callback.message.edit_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.")
        except:
            await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ —Ç–æ–∫–µ–Ω–∞.")

@dp.callback_query(lambda c: c.data == "keep_token")
async def keep_token(callback: types.CallbackQuery, state: FSMContext):
    profile = await sync_to_async(lambda: TelegramProfile.objects.filter(telegram_id=callback.from_user.id).first())()
    if profile:
        profile.first_name = callback.from_user.first_name
        profile.last_name = callback.from_user.last_name
        profile.username = callback.from_user.username
        profile.is_connected = True
        await sync_to_async(profile.save)()
        await callback.message.edit_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!")
    else:
        await callback.message.edit_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.")
    await state.clear()


# --- –ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ ---
@dp.message(Form.waiting_for_token)
async def link_account(message: types.Message, state: FSMContext):
    await message.delete()
    token = message.text.strip()
    try:
        profile = await sync_to_async(TelegramProfile.objects.get)(token=token)

        # --- –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω ---
        if profile.telegram_id:
            if profile.telegram_id == message.from_user.id:
                await message.answer("‚úÖ –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.")
            else:
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîó –û—Ç–≤—è–∑–∞—Ç—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç", url="https://—Ç–≤–æ–π_—Å–∞–π—Ç/unlink")],
                        [InlineKeyboardButton(text="‚ùå –û—Ç–≤—è–∑–∞—Ç—å –≤ –±–æ—Ç–µ", callback_data=f"unlink_token:{profile.id}")]
                    ]
                )
                await message.answer(
                    "‚ùå –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–≤—è–∑–∫–∏:",
                    reply_markup=keyboard
                )
            await state.clear()
            return   # üö® –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã—Ö–æ–¥–∏–º

        profile.telegram_id = message.from_user.id
        profile.is_connected = True
        profile.first_name = message.from_user.first_name
        profile.last_name = message.from_user.last_name
        profile.username = message.from_user.username
        await sync_to_async(profile.save)()

        await message.answer(
            await get_text(message.from_user.id, 'account_linked', token=token),
            reply_markup=await get_main_keyboard(message.from_user.id)
        )
        await state.clear()
        return   # üö® –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã—Ö–æ–¥–∏–º

    except TelegramProfile.DoesNotExist:
        await message.answer(await get_text(message.from_user.id, 'invalid_token'))
        await state.clear()
        return


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---
@dp.message()
async def unknown_command(message: types.Message):
    await message.delete()
    await message.answer(
        f"{await get_text(message.from_user.id, 'unknown_command')}\n"
        "/start, /help, /lang",
        reply_markup=await get_main_keyboard(message.from_user.id)
    )


async def format_vacancy_message(user_id, vacancy, query):
    salary_text = await get_text(user_id, 'salary')
    location_text = await get_text(user_id, 'location')
    view_text = await get_text(user_id, 'view_vacancy_button')

    vacancy_url = f"https://quality-herring-fine.ngrok-free.app/vacancies/{vacancy.id}/"

    return (
        f"üè¢ <b>{vacancy.title}</b>\n\n"
        f"üíµ {vacancy.salary} {salary_text}\n"
        f"üìç {vacancy.city or location_text}\n"
        f"üïí {vacancy.get_work_type_display()}\n\n"
        f"{vacancy.description[:200]}...\n\n"
        f"<a href='{vacancy_url}'>{view_text}</a>\n\n"
        f"üîç #{query.replace(' ', '_')}"
    )


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    try:
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())